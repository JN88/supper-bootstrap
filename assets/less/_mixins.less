//
// MIXINS
// --------------------------------------------------

// MIXIN: Check Value jave Important
//--------------------------------------------------------------------------------
// Parameter 		Type 		Default 		Description
//--------------------------------------------------------------------------------
// @important 		boolean		false			Define Values Lazy Loading

.checkImportant(@important) when (@important = false){
	@important: ~"";
	@importantClass: ~"";
}
.checkImportant(@important) when (@important = true){
	@important: '!important';
	@importantClass: ~"-ipt";
}

// MIXIN: Check Value jave Important
//--------------------------------------------------------------------------------
// Parameter 		Type 		Default 		Description
//--------------------------------------------------------------------------------
// @important 		boolean		false			Condition to check values is Important

.marginAndPaddingZero(@important: false){
	.checkImportant(@important);
	.@{margin-prefix}-0@{importantClass} {margin: 0~"@{important}";}
	.@{margin-prefix}-@{top-alias}-0@{importantClass} {margin-top: 0~"@{important}";}
	.@{margin-prefix}-@{right-alias}-0@{importantClass} {margin-right: 0~"@{important}";}
	.@{margin-prefix}-@{bottom-alias}-0@{importantClass} {margin-bottom: 0~"@{important}";}
	.@{margin-prefix}-@{left-alias}-0@{importantClass} {margin-left: 0~"@{important}";}

	.@{padding-prefix}-0@{importantClass} {padding: 0~"@{important}";}
	.@{padding-prefix}-@{top-alias}-0@{importantClass} {padding-top: 0~"@{important}";}
	.@{padding-prefix}-@{right-alias}-0@{importantClass} {padding-right: 0~"@{important}";}
	.@{padding-prefix}-@{bottom-alias}-0@{importantClass} {padding-bottom: 0~"@{important}";}
	.@{padding-prefix}-@{left-alias}-0@{importantClass} {padding-left: 0~"@{important}";}
}

// MIXIN: Generate Margin and Padding
//--------------------------------------------------------------------------------
// Parameter 		Type 		Default 		Description
//--------------------------------------------------------------------------------
// @maxValue 		int							maximum value
// @minValue 		int							Minium value
// @countDown 		int			5				Count down value
// @important 		boolean		false			If value is true values will be add !important

.marginAndPadding(@maxValue, @minValue: 0, @countDown: 5, @important: false){
	@numberMaxValue: unit(@maxValue);
	@unitMaxValue: get-unit(@maxValue);
	@numberMinValue: unit(@minValue);
	@unitMinValue: get-unit(@maxValue);

	.checkImportant(@important);

	// Default unit is px
	.loop_margin_padding (@numberMaxValue) when (@numberMaxValue >= @numberMinValue) and (@numberMaxValue > 0) and (@unitMaxValue = px){

		// Padding
		//------------------------------------------------------------
		.@{padding-prefix}-@{numberMaxValue}@{importantClass} {padding: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{padding-prefix}-@{top-alias}-@{numberMaxValue}@{importantClass} {padding-top: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{padding-prefix}-@{right-alias}-@{numberMaxValue}@{importantClass} {padding-right: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{padding-prefix}-@{bottom-alias}-@{numberMaxValue}@{importantClass} {padding-bottom: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{padding-prefix}-@{left-alias}-@{numberMaxValue}@{importantClass} {padding-left: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}

		// Padding Horizatial
		.@{padding-prefix}-0-@{numberMaxValue}@{importantClass} {padding: 0 ~"@{numberMaxValue}@{unitMaxValue}@{important}";}

		// Padding Vertical
		.@{padding-prefix}-@{numberMaxValue}-0@{importantClass} {padding: ~"@{numberMaxValue}@{unitMaxValue}" 0~"@{important}";}

		// Margin
		//------------------------------------------------------------
		.@{margin-prefix}-@{numberMaxValue}@{importantClass} {margin: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{margin-prefix}-@{top-alias}-@{numberMaxValue}@{importantClass} {margin-top: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{margin-prefix}-@{right-alias}-@{numberMaxValue}@{importantClass} {margin-right: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{margin-prefix}-@{bottom-alias}-@{numberMaxValue}@{importantClass} {margin-bottom: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{margin-prefix}-@{left-alias}-@{numberMaxValue}@{importantClass} {margin-left: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}

		// margin Horizatial
		.@{margin-prefix}-0-@{numberMaxValue}@{importantClass} {margin: 0 ~"@{numberMaxValue}@{unitMaxValue}@{important}";}

		// margin Vertical
		.@{margin-prefix}-@{numberMaxValue}-0@{importantClass} {margin: ~"@{numberMaxValue}@{unitMaxValue}" 0~"@{important}";}

		// next iteration
		.loop_margin_padding(@numberMaxValue - @countDown);
	}

	// When unit is not px
	.loop_margin_padding(@numberMaxValue) when (@numberMaxValue >= @minValue) and (@numberMaxValue > 0) and not (@unitMaxValue = px){

		// Padding
		//------------------------------------------------------------
		.@{padding-prefix}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {padding: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{padding-prefix}-@{top-alias}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {padding-top: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{padding-prefix}-@{right-alias}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {padding-right: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{padding-prefix}-@{bottom-alias}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {padding-bottom: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{padding-prefix}-@{left-alias}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {padding-left: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}

		// Padding Horizatial
		.@{padding-prefix}-0@{unitMaxValue}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {padding: 0 ~"@{numberMaxValue}@{unitMaxValue}@{important}";}

		// Padding Vertical
		.@{padding-prefix}-@{numberMaxValue}@{unitMaxValue}-0@{unitMaxValue}@{importantClass} {padding: ~"@{numberMaxValue}@{unitMaxValue}" 0 ~"@{important}";}

		// Margin
		//------------------------------------------------------------
		.@{margin-prefix}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {margin: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{margin-prefix}-@{top-alias}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {margin-top: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{margin-prefix}-@{right-alias}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {margin-right: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{margin-prefix}-@{bottom-alias}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {margin-bottom: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}
		.@{margin-prefix}-@{left-alias}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {margin-left: ~"@{numberMaxValue}@{unitMaxValue}@{important}";}

		// margin Horizatial
		.@{margin-prefix}-0@{unitMaxValue}-@{numberMaxValue}@{unitMaxValue}@{importantClass} {margin: 0 ~"@{numberMaxValue}@{unitMaxValue}@{important}";}

		// margin Vertical
		.@{margin-prefix}-@{numberMaxValue}@{unitMaxValue}-0@{unitMaxValue}@{importantClass} {margin: ~"@{numberMaxValue}@{unitMaxValue}" 0~"@{important}";}

		// next iteration
		.loop_margin_padding(@numberMaxValue - @countDown);
	}

	// end the loop when index is 0
	.loop_margin_padding (0) {}

	// "call" the loopingClass the first time with highest value
	.loop_margin_padding (@numberMaxValue);
}

// MIXIN: Generate Font Size
//--------------------------------------------------------------------------------
// Parameter 		Type 		Default 		Description
//--------------------------------------------------------------------------------
// @maxValue 		int							maximum value
// @minValue 		int			1				Minium value
// @countDown 		int			1				Count down value
// @important 		boolean		false			If value is true values will be add !important

.fontSizeLoop(@maxValue, @minValue: 1, @countDown: 1, @important: false) {
	@numberMaxValue: unit(@maxValue);
	@unitMaxValue: get-unit(@maxValue);
	@numberMinValue: unit(@minValue);
	@unitMinValue: get-unit(@maxValue);

	.checkImportant(@important);

	// Default unit is px
	.loopSize (@numberMaxValue) when (@numberMaxValue >= @numberMinValue) and (@unitMaxValue = px){
		.@{font-size-prefix}-@{numberMaxValue}@{importantClass} {
			font-size: ~"@{numberMaxValue}@{unitMaxValue}@{important}";
		}

		// next iteration
		.loopSize(@numberMaxValue - @countDown);
	}
	// When unit is not px
	.loopSize (@index) when (@index >= @minValue) and not (@unitMaxValue = px){
		.@{font-size-prefix}-@{index}@{unitMaxValue}@{importantClass} {
			font-size: ~"@{index}@{unitMaxValue}@{important}";
		}

		// next iteration
		.loopSize(@index - @countDown);
	}

	// end the loop when index is 0
	.loopSize (0) {}
	.loopSize(@numberMaxValue);
}

// MIXIN: Generate Width
//--------------------------------------------------------------------------------
// Parameter 		Type 		Default 		Description
//--------------------------------------------------------------------------------
// @maxValue 		int							maximum value
// @minValue 		int			1				Minium value
// @countDown 		int			5				Count down value
// @important 		boolean		false			If value is true values will be add !important

.widthSizeLoop(@maxValue, @minValue: 1, @countDown: 5, @important: false) {
	@numberMaxValue: unit(@maxValue);
	@unitMaxValue: get-unit(@maxValue);
	@numberMinValue: unit(@minValue);
	@unitMinValue: get-unit(@maxValue);

	.checkImportant(@important);

	// Default unit is px
	.loopSize (@numberMaxValue) when (@numberMaxValue >= @numberMinValue) and (@unitMaxValue = px){
		.@{width-prefix}-@{numberMaxValue}@{importantClass} {
			font-size: ~"@{numberMaxValue}@{unitMaxValue}@{important}";
		}

		// next iteration
		.loopSize(@numberMaxValue - @countDown);
	}
	// When unit is not px
	.loopSize (@index) when (@index >= @minValue) and not (@unitMaxValue = px){
		.@{width-prefix}-@{index}@{unitMaxValue}@{importantClass} {
			font-size: ~"@{index}@{unitMaxValue}@{important}";
		}

		// next iteration
		.loopSize(@index - @countDown);
	}

	// end the loop when index is 0
	.loopSize (0) {}
	.loopSize(@numberMaxValue);
}


// MIXIN: Liquid Layout
//--------------------------------------------------------------------------------
#liquid-layout {

	// MIXIN: Fixed-Fluid Layout Use Overflow Hidden
	//--------------------------------------------------------------------------------
	// Parameter 			Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @widthFixedColumn 	int			300px			With of fixed column
	// @gutterSize			int			20px			Space (margin) between columns
	// @fixedColumnName 	string		fixed-column	Default name of fixed column
	// @fluidColumnName		string 		fluid-column 	Default name of fluid column

	.fixedFluidOverflow(@widthFixedColumn: 300px, @gutterSize: 20px, @fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column') {
		> @{fixedColumnName} {
			float: left;
			width: @widthFixedColumn;
			margin-right: @gutterSize;
			+ @{fluidColumnName} {
				overflow: hidden;
			}
			&.hidden, &.hide {
				+ @{fluidColumnName} {
					overflow: visible;
				}
			}
		}
	}

	// MIXIN: Remove Fixed-Fluid Layout Use Overflow Hidden
	//--------------------------------------------------------------------------------
	// Parameter 			Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @fixedColumnName 	string		fixed-column	Default name of fixed column
	// @fluidColumnName		string 		fluid-column 	Default name of fluid column

	.unFixedFluidOverflow(@fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column'){
		> @{fixedColumnName} {
			float: none;
			width: auto;
			margin-right: 0;
			+ @{fluidColumnName} {
				overflow: visible;
			}
		}
	}

	// MIXIN: Fluid-Fixed Layout Use Overflow
	//--------------------------------------------------------------------------------
	// Parameter 			Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @widthFixedColumn 	int			300px			With of fixed column
	// @gutterSize			int			20px			Space (margin) between columns
	// @fixedColumnName 	string		fixed-column	Default name of fixed column
	// @fluidColumnName		string 		fluid-column 	Default name of fluid column

	.fluidFixedOverflow(@widthFixedColumn: 300px, @gutterSize: 20px, @fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column') {
		> @{fixedColumnName} {
			float: right;
			width: @widthFixedColumn;
			margin-left: @gutterSize;
			+ @{fluidColumnName} {
				overflow: hidden;
			}
			&.hidden, &.hide {
				+ @{fluidColumnName} {
					overflow: visible;
				}
			}
		}
	}

	// MIXIN: Remove Fixed-Fluid Layout use Overflow Hidden
	//--------------------------------------------------------------------------------
	// Parameter 			Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @fixedColumnName 	string		fixed-column	Default name of fixed column
	// @fluidColumnName		string 		fluid-column 	Default name of fluid column

	.unFluidFixedOverflow(@fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column') {
		> @{fixedColumnName} {
			float: none;
			width: auto;
			margin-left: 0;
		}
		> @{fluidColumnName} {
			overflow: visible;
		}
	}

	// MIXIN: Fixed-Fluid-Fixed Layout Use Overflow Hidden
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 			Description
	//--------------------------------------------------------------------------------
	// @widthFixedLeftColumn 	int			300px				With of fixed left column
	// @widthFixedRightColumn 	int			300px				With of fixed right column
	// @gutterLeftSize			int			20px				Space (margin) of fixed left columns
	// @gutterRightSize			int			20px				Space (margin) of fixed right columns
	// @fixedLeftColumnName 	string		fixed-left-column 	Default name of fixed left column
	// @fixedRightColumnName 	string		fixed-right-column	Default name of fixed right column
	// @fluidColumnName			string 		fluid-column 		Default name of fluid column

	.fixedFluidFixedOverflow(@widthFixedLeftColumn: 300px, @gutterLeftSize: 20px, @widthFixedRightColumn: 300px, @gutterRightSize: 20px, @fixedLeftColumnName: ~'.fixed-left-column', @fixedRightColumnName: ~'.fixed-right-column', @fluidColumnName: ~'.fluid-column') {
		> @{fixedLeftColumnName} {
			float: left;
			width: @widthFixedLeftColumn;
			margin-right: @gutterLeftSize;
		}
		> @{fixedRightColumnName} {
			float: right;
			width: @widthFixedRightColumn;
			margin-left: @gutterRightSize;
		}
		> @{fluidColumnName} {
			overflow: hidden;
		}
		> @{fixedLeftColumnName}.hide + @{fixedRightColumnName}.hide,
		> @{fixedLeftColumnName}.hidden + @{fixedRightColumnName}.hidden {
			+ @{fluidColumnName} {
				overflow: visible;
			}
		}
	}

	// MIXIN: Remove Fixed-Fluid-Fixed Layout Use Overflow Hidden
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 			Description
	//--------------------------------------------------------------------------------
	// @fixedLeftColumnName 	string		fixed-left-column 	Default name of fixed left column
	// @fixedRightColumnName 	string		fixed-right-column	Default name of fixed right column
	// @fluidColumnName			string 		fluid-column 		Default name of fluid column

	.unFixedFluidFixedOverflow(@fixedLeftColumnName: ~'.fixed-left-column', @fixedRightColumnName: ~'.fixed-right-column', @fluidColumnName: ~'.fluid-column') {
		> @{fixedLeftColumnName} {
			float: none;
			width: auto;
			margin-right: 0;
		}
		> @{fixedRightColumnName} {
			float: right;
			width: auto;
			margin-left: 0;
		}
		> @{fluidColumnName} {
			overflow: visible;
		}
	}

	// MIXIN: Fixed-Fluid Layout Swap
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @widthFixedColumn 		int			300px			With of fixed column
	// @gutterSize				int			20px			Space (margin) between columns
	// @fixedColumnName 		string		fixed-column	Default name of fixed column
	// @fluidColumnName			string 		fluid-column 	Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 			Default name of fluid column inner

	.fixedFluidSwap(@widthFixedColumn: 300px, @gutterSize: 20px, @fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fluidColumnName} {
			float: left;
			width: 100%;
			> @{fluidInnerColumnName} {
				margin-left: @widthFixedColumn + @gutterSize;
			}
		}
		> @{fixedColumnName} {
			float: left;
			width: @widthFixedColumn;
			margin-left: -100%;
		}
	}

	// MIXIN: Remove Fixed-Fluid Layout Swap
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @fixedColumnName 		string		fixed-column	Default name of fixed column
	// @fluidColumnName			string 		fluid-column 	Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 			Default name of fluid column inner

	.unFixedFluidSwap(@fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fluidColumnName} {
			float: none;
			width: auto;
			> @{fluidInnerColumnName} {
				margin-left: 0;
			}
		}
		> @{fixedColumnName} {
			float: none;
			width: auto;
			margin-left: 0;
		}
	}

	// MIXIN: Fluid-Fixed Layout Swap
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @widthFixedColumn 		int			300px			With of fixed column
	// @gutterSize				int			20px			Space (margin) between columns
	// @fixedColumnName 		string		fixed-column	Default name of fixed column
	// @fluidColumnName			string 		fluid-column 	Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 			Default name of fluid column inner

	.fluidFixedSwap(@widthFixedColumn: 300px, @gutterSize: 20px, @fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fluidColumnName} {
			float: left;
			width: 100%;
			> @{fluidInnerColumnName} {
				margin-right: @widthFixedColumn + @gutterSize;
			}
		}
		> @{fixedColumnName} {
			float: right;
			width: @widthFixedColumn;
			margin-left: -@widthFixedColumn;
		}
	}

	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @fixedColumnName 		string		fixed-column	Default name of fixed column
	// @fluidColumnName			string 		fluid-column 	Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 			Default name of fluid column inner

	// MIXIN: Remove Fluid-Fixed Layout Swap
	.unFluidFixedSwap(@fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fluidColumnName} {
			float: none;
			width: auto;
			> @{fluidInnerColumnName} {
				margin-right: 0;
			}
		}
		> @{fixedColumnName} {
			float: right;
			width: auto;
			margin-left: 0;
		}
	}

	// MIXIN: Fixed-Fluid-Fixed Layout Swap
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 			Description
	//--------------------------------------------------------------------------------
	// @widthFixedLeftColumn 	int			300px				With of fixed left column
	// @widthFixedRightColumn 	int			300px				With of fixed right column
	// @gutterLeftSize			int			20px				Space (margin) of fixed left columns
	// @gutterRightSize			int			20px				Space (margin) of fixed right columns
	// @fixedLeftColumnName 	string		fixed-left-column 	Default name of fixed left column
	// @fixedRightColumnName 	string		fixed-right-column	Default name of fixed right column
	// @fluidColumnName			string 		fluid-column 		Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 				Default name of fluid column inner

	.fixedFluidFixedSwap(@widthFixedLeftColumn: 300px, @gutterLeftSize: 20px, @widthFixedRightColumn: 300px, @gutterRightSize: 20px, @fixedLeftColumnName: ~'.fixed-left-column', @fixedRightColumnName: ~'.fixed-right-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fluidColumnName} {
			float: left;
			width: 100%;
			> @{fluidInnerColumnName} {
				margin-left: @widthFixedLeftColumn + @gutterLeftSize;
				margin-right: @widthFixedRightColumn + @gutterRightSize;
			}
		}
		> @{fixedLeftColumnName} {
			float: left;
			margin-left: -100%;
			width: @widthFixedLeftColumn;
		}
		> @{fixedRightColumnName} {
			float: right;
			width: @widthFixedRightColumn;
			margin-left: -@widthFixedRightColumn;
		}
	}


	// MIXIN: Remove Fixed-Fluid-Fixed Layout Swap
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 			Description
	//--------------------------------------------------------------------------------
	// @fixedLeftColumnName 	string		fixed-left-column 	Default name of fixed left column
	// @fixedRightColumnName 	string		fixed-right-column	Default name of fixed right column
	// @fluidColumnName			string 		fluid-column 		Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 				Default name of fluid column inner

	.unFixedFluidFixedSwap(@fixedLeftColumnName: ~'.fixed-left-column', @fixedRightColumnName: ~'.fixed-right-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fluidColumnName} {
			float: none;
			width: 100%;
			> @{fluidInnerColumnName} {
				margin-left: 0;
				margin-right: 0;
			}
		}
		> @{fixedLeftColumnName} {
			float: none;
			margin-left: 0;
			width: auto;
		}
		> @{fixedRightColumnName} {
			float: none;
			width: auto;
			margin-left: 0;
		}
	}

	// Fixed-Fluid-Fixed Layout User Float and Margin
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @widthFixedColumn 		int			300px			With of fixed column
	// @gutterSize				int			20px			Space (margin) between columns
	// @fixedColumnName 		string		fixed-column	Default name of fixed column
	// @fluidColumnName			string 		fluid-column 	Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 			Default name of fluid column inner

	.fixedFluidPush(@widthFixedColumn: 300px, @gutterSize: 20px, @fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fixedColumnName} {
			float: left;
			width: @widthFixedColumn;
			margin-right: @gutterSize;
			+ @{fluidColumnName} {
				margin-left: @widthFixedColumn + @gutterSize;
				> @{fluidInnerColumnName} {
					display: inline-block;
					width: 100%;
				}
			}
		}
	}

	// Remove Fixed-Fluid-Fixed Layout User Float and Margin
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @fixedColumnName 		string		fixed-column	Default name of fixed left column
	// @fluidColumnName			string 		fluid-column 	Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 			Default name of fluid column inner

	.unFixedFluidPush(@fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fixedColumnName} {
			float: none;
			width: auto;
			margin-right: 0;
			+ @{fluidColumnName} {
				margin-left: 0;
				> @{fluidInnerColumnName} {
					display: block;
				}
			}
		}
	}

	// Fluid-Fixed Layout User Float and Margin
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @widthFixedColumn 		int			300px			With of fixed column
	// @gutterSize				int			20px			Space (margin) between columns
	// @fixedColumnName 		string		fixed-column	Default name of fixed column
	// @fluidColumnName			string 		fluid-column 	Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 			Default name of fluid column inner

	.fluidFixedPush(@widthFixedColumn: 300px, @gutterSize: 20px, @fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fixedColumnName} {
			float: right;
			width: @widthFixedColumn;
			margin-left: @gutterSize;
			+ @{fluidColumnName} {
				margin-right: @widthFixedColumn + @gutterSize;
				> @{fluidInnerColumnName} {
					display: inline-block;
					width: 100%;
				}
			}
		}
	}

	// Remove Fluid-Fixed Layout User Float and Margin
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 		Description
	//--------------------------------------------------------------------------------
	// @fixedColumnName 		string		fixed-column	Default name of fixed left column
	// @fluidColumnName			string 		fluid-column 	Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 			Default name of fluid column inner

	.unFluidFixedPush(@fixedColumnName: ~'.fixed-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fixedColumnName} {
			float: none;
			width: @widthFixedColumn;
			margin-left: @gutterSize;
			+ @{fluidColumnName} {
				margin-right: 0;
				> @{fluidInnerColumnName} {
					display: block;
					width: auto;
				}
			}
		}
	}

	// Fixed-Fluid-Fixed Layout User Float and Margin
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 			Description
	//--------------------------------------------------------------------------------
	// @widthFixedLeftColumn 	int			300px				With of fixed left column
	// @widthFixedRightColumn 	int			300px				With of fixed right column
	// @gutterLeftSize			int			20px				Space (margin) of fixed left columns
	// @gutterRightSize			int			20px				Space (margin) of fixed right columns
	// @fixedLeftColumnName 	string		fixed-left-column 	Default name of fixed left column
	// @fixedRightColumnName 	string		fixed-right-column	Default name of fixed right column
	// @fluidColumnName			string 		fluid-column 		Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 				Default name of fluid column inner

	.fixedFluidFixedPush(@widthFixedLeftColumn: 300px, @gutterLeftSize: 20px, @widthFixedRightColumn: 300px, @gutterRightSize: 20px, @fixedLeftColumnName: ~'.fixed-left-column', @fixedRightColumnName: ~'.fixed-right-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fixedLeftColumnName} {
			float: left;
			width: @widthFixedLeftColumn;
			margin-right: @gutterLeftSize;
			+ @{fixedRightColumnName} {
			}
		}
		> @{fixedLeftColumnName},
		> @{fixedLeftColumnName} + @{fixedRightColumnName}
		{
			+ @{fluidColumnName} {
				margin-left: @widthFixedLeftColumn + @gutterLeftSize;
			}
		}
		@{fixedRightColumnName} {
			float: right;
			width: @widthFixedRightColumn;
			margin-left: @gutterRightSize;
			+ @{fluidColumnName} {
				margin-right: @widthFixedRightColumn + @gutterRightSize;
			}
		}
		> @{fluidColumnName} {
			> @{fluidInnerColumnName} {
				display: inline-block;
				width: 100%;
			}
		}
		> @{fixedLeftColumnName}.hide + @{fixedRightColumnName}.hide,
		> @{fixedLeftColumnName}.hidden + @{fixedRightColumnName}.hidden {
			+ @{fluidColumnName} {
				margin-left: 0;
				margin-right: 0;
			}
		}
		> @{fixedLeftColumnName}.hide + @{fixedRightColumnName} + @{fluidColumnName},
		> @{fixedLeftColumnName}.hidden + @{fixedRightColumnName} + @{fluidColumnName} {
			margin-left: 0;
		}
		> @{fixedRightColumnName}.hide + @{fluidColumnName},
		> @{fixedRightColumnName}.hidden + @{fluidColumnName} {
			margin-right: 0;
		}
	}

	// Remove Fixed-Fluid-Fixed Layout User Float and Margin
	//--------------------------------------------------------------------------------
	// Parameter 				Type 		Default 			Description
	//--------------------------------------------------------------------------------
	// @fixedLeftColumnName 	string		fixed-left-column 	Default name of fixed left column
	// @fixedRightColumnName 	string		fixed-right-column	Default name of fixed right column
	// @fluidColumnName			string 		fluid-column 		Default name of fluid column
	// @fluidInnerColumnName 	string 		inner 				Default name of fluid column inner

	.unFixedFluidFixedPush(@fixedLeftColumnName: ~'.fixed-left-column', @fixedRightColumnName: ~'.fixed-right-column', @fluidColumnName: ~'.fluid-column', @fluidInnerColumnName: ~'.inner') {
		> @{fixedLeftColumnName} {
			float: none;
			width: auto;
			margin-right: 0;
			+ @{fixedRightColumnName} {
			}
		}
		> @{fixedLeftColumnName},
		> @{fixedLeftColumnName} + @{fixedRightColumnName}
		{
			+ @{fluidColumnName} {
				margin-left: 0;
			}
		}
		> @{fixedRightColumnName} {
			float: right;
			width: auto;
			margin-left: @gutterRightSize;
			+ @{fluidColumnName} {
				margin-right: 0;
			}
		}
		> @{fluidColumnName} {
			> @{fluidInnerColumnName} {
				display: block;
				width: auto;
			}
		}
	}
}

// MIXIN : Transform CSS3
// --------------------------------------------------
.transform(@transform) {
	-webkit-transform: @transform;
	-moz-transform: @transform;
	  -ms-transform: @transform; // IE9 only
	  transform: @transform;
	}

// MIXIN: Set Link Color
// --------------------------------------------------
.link-color(@color: @link-color, @colorHover: @link-hover-color){
	color: @color;
	&:hover {
		color: @colorHover;
	}
}

// MIXIN: Set Link Color for text
.link-text-color(@color: @text-color, @colorHover: @link-color){
	color: @color;
	&:hover {
		color: @colorHover;
	}
}

//
// MIXIN: MIXINS for this Project
// --------------------------------------------------//
// Write new mixin for project here...
