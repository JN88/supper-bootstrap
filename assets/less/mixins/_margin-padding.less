// MIXIN: Generate Margin and Padding
//--------------------------------------------------------------------------------
// Parameter 		Type 		Default 		Description
//--------------------------------------------------------------------------------
// @maxValue 		int							maximum value
// @minValue 		int							Minium value
// @countDown 		int			5				Count down value
// @important 		boolean		false			If value is true values will be add !important


.marginAndPadding(@maxValue, @minValue: 0, @countDown: 5){
	@numberMaxValue: unit(@maxValue);
	@unitMaxValue: get-unit(@maxValue);
	@numberMinValue: unit(@minValue);
	@unitMinValue: get-unit(@maxValue);


	// Default unit is px
	.loop_margin_padding (@numberMaxValue) when (@numberMaxValue >= @numberMinValue) and (@numberMaxValue > 0) and (@unitMaxValue = px){

		// Padding
		//------------------------------------------------------------
		.@{padding-prefix}-@{numberMaxValue} {padding: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{padding-prefix}-@{top-alias}-@{numberMaxValue} {padding-top: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{padding-prefix}-@{right-alias}-@{numberMaxValue} {padding-right: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{padding-prefix}-@{bottom-alias}-@{numberMaxValue} {padding-bottom: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{padding-prefix}-@{left-alias}-@{numberMaxValue} {padding-left: ~"@{numberMaxValue}@{unitMaxValue}";}

		// Padding Horizatial
		.@{padding-prefix}-0-@{numberMaxValue} {padding: 0 ~"@{numberMaxValue}@{unitMaxValue}";}

		// Padding Vertical
		.@{padding-prefix}-@{numberMaxValue}-0 {padding: ~"@{numberMaxValue}@{unitMaxValue}" 0;}

		// Margin
		//------------------------------------------------------------
		.@{margin-prefix}-@{numberMaxValue} {margin: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{margin-prefix}-@{top-alias}-@{numberMaxValue} {margin-top: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{margin-prefix}-@{right-alias}-@{numberMaxValue} {margin-right: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{margin-prefix}-@{bottom-alias}-@{numberMaxValue} {margin-bottom: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{margin-prefix}-@{left-alias}-@{numberMaxValue} {margin-left: ~"@{numberMaxValue}@{unitMaxValue}";}

		// margin Horizatial
		.@{margin-prefix}-0-@{numberMaxValue} {margin: 0 ~"@{numberMaxValue}@{unitMaxValue}";}

		// margin Vertical
		.@{margin-prefix}-@{numberMaxValue}-0 {margin: ~"@{numberMaxValue}@{unitMaxValue}" 0;}

		// next iteration
		.loop_margin_padding(@numberMaxValue - @countDown);
	}

	// When unit is not px
	.loop_margin_padding(@numberMaxValue) when (@numberMaxValue >= @minValue) and (@numberMaxValue > 0) and not (@unitMaxValue = px){

		// Padding
		//------------------------------------------------------------
		.@{padding-prefix}-@{numberMaxValue}@{unitMaxValue} {padding: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{padding-prefix}-@{top-alias}-@{numberMaxValue}@{unitMaxValue} {padding-top: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{padding-prefix}-@{right-alias}-@{numberMaxValue}@{unitMaxValue} {padding-right: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{padding-prefix}-@{bottom-alias}-@{numberMaxValue}@{unitMaxValue} {padding-bottom: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{padding-prefix}-@{left-alias}-@{numberMaxValue}@{unitMaxValue} {padding-left: ~"@{numberMaxValue}@{unitMaxValue}";}

		// Padding Horizatial
		.@{padding-prefix}-0@{unitMaxValue}-@{numberMaxValue}@{unitMaxValue} {padding: 0 ~"@{numberMaxValue}@{unitMaxValue}";}

		// Padding Vertical
		.@{padding-prefix}-@{numberMaxValue}@{unitMaxValue}-0@{unitMaxValue} {padding: ~"@{numberMaxValue}@{unitMaxValue}" 0 ;}

		// Margin
		//------------------------------------------------------------
		.@{margin-prefix}-@{numberMaxValue}@{unitMaxValue} {margin: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{margin-prefix}-@{top-alias}-@{numberMaxValue}@{unitMaxValue} {margin-top: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{margin-prefix}-@{right-alias}-@{numberMaxValue}@{unitMaxValue} {margin-right: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{margin-prefix}-@{bottom-alias}-@{numberMaxValue}@{unitMaxValue} {margin-bottom: ~"@{numberMaxValue}@{unitMaxValue}";}
		.@{margin-prefix}-@{left-alias}-@{numberMaxValue}@{unitMaxValue} {margin-left: ~"@{numberMaxValue}@{unitMaxValue}";}

		// margin Horizatial
		.@{margin-prefix}-0@{unitMaxValue}-@{numberMaxValue}@{unitMaxValue} {margin: 0 ~"@{numberMaxValue}@{unitMaxValue}";}

		// margin Vertical
		.@{margin-prefix}-@{numberMaxValue}@{unitMaxValue}-0@{unitMaxValue} {margin: ~"@{numberMaxValue}@{unitMaxValue}" 0;}

		// next iteration
		.loop_margin_padding(@numberMaxValue - @countDown);
	}

	// end the loop when index is 0
	.loop_margin_padding (0) {}

	// "call" the loopingClass the first time with highest value
	.loop_margin_padding (@numberMaxValue);
}